name: Frontend CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'hotfix/**'
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write
  security-events: write
  checks: write

concurrency:
  group: frontend-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  CI: "true"
  ENVIRONMENT: "testing"

defaults:
  run:
    working-directory: frontend

jobs:
  lint-and-format:
    name: "üîç Lint & Format Check"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        run: npm run lint -- --format=github

      - name: Run Prettier check
        run: npm run format:check

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: frontend/eslint-report.json

  security-scan:
    name: "üîí Security & Dependency Scan"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: npm audit --audit-level=high --output=json > npm-audit.json || true
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=frontend/package.json --json-file-output=snyk-results.json
          working-directory: frontend
        continue-on-error: true

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            frontend/npm-audit.json
            frontend/snyk-results.json

  unit-tests:
    name: "üß™ Unit Tests"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend-unit-tests
          name: codecov-frontend
          fail_ci_if_error: true

      - name: Generate coverage report
        run: npm run test:coverage -- --coverageReporters=json-summary

      - name: Coverage Badge
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: qenergyz-frontend-coverage.json
          label: Coverage
          message: ${{ steps.coverage.outputs.percentage }}%
          color: ${{ steps.coverage.outputs.color }}

  integration-tests:
    name: "üîó Integration Tests"
    runs-on: ubuntu-latest
    needs: [unit-tests]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Start mock backend
        run: |
          npm run mock-server &
          npx wait-on http://localhost:8000/health
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          VITE_API_URL: http://localhost:8000
          REDIS_URL: redis://localhost:6379/1

  e2e-tests:
    name: "üé≠ End-to-End Tests"
    runs-on: ubuntu-latest
    needs: [integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          npx wait-on http://localhost:3000

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  accessibility-tests:
    name: "‚ôø Accessibility Tests"
    runs-on: ubuntu-latest
    needs: [unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build

      - name: Run accessibility tests with axe
        run: |
          npm run test:a11y
        continue-on-error: true

      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results
          path: frontend/a11y-results.json

  performance-tests:
    name: "‚ö° Performance Tests"
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: npx @lhci/cli@0.12.x autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Bundle size analysis
        run: npm run analyze

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            frontend/.lighthouseci/
            frontend/bundle-analysis.json

  docker-build:
    name: "üê≥ Docker Build & Security Scan"
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          push: false
          tags: qenergyz/frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_TIME=${{ github.run_id }}
            VERSION=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'qenergyz/frontend:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  i18n-validation:
    name: "üåê i18n Validation"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Validate translation files
        run: |
          # Check for missing translations
          npm run i18n:validate
          
          # Check for unused translations
          npm run i18n:unused

      - name: Generate translation report
        run: npm run i18n:report

      - name: Upload i18n results
        uses: actions/upload-artifact@v4
        with:
          name: i18n-validation-results
          path: frontend/i18n-report.json

  build-summary:
    name: "üìä Build Summary"
    runs-on: ubuntu-latest
    needs: [
      lint-and-format,
      security-scan,
      unit-tests,
      integration-tests,
      e2e-tests,
      accessibility-tests,
      docker-build,
      i18n-validation
    ]
    if: always()

    steps:
      - name: Generate build summary
        run: |
          echo "## üöÄ Qenergyz Frontend Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          echo "- üîç Code Quality: ${{ needs.lint-and-format.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîí Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üß™ Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîó Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üé≠ E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ôø Accessibility: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üê≥ Docker Build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üåê i18n Validation: ${{ needs.i18n-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality Metrics:" >> $GITHUB_STEP_SUMMARY
          echo "- Target Coverage: 80%+" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scans: Snyk + npm audit + Trivy" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility: WCAG 2.1 AA" >> $GITHUB_STEP_SUMMARY
          echo "- Performance: Lighthouse CI" >> $GITHUB_STEP_SUMMARY
          echo "- i18n: Arabic/English support" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any failing checks above" >> $GITHUB_STEP_SUMMARY
          echo "2. Address security findings if any" >> $GITHUB_STEP_SUMMARY
          echo "3. Ensure accessibility compliance" >> $GITHUB_STEP_SUMMARY
          echo "4. Validate i18n completeness" >> $GITHUB_STEP_SUMMARY
          echo "5. Ready for deployment if all checks pass ‚ú®" >> $GITHUB_STEP_SUMMARY

  deploy-preview:
    name: "üöÄ Deploy Preview"
    runs-on: ubuntu-latest
    needs: [build-summary]
    if: github.event_name == 'pull_request'
    environment: preview

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to preview environment
        run: |
          echo "Preview deployment would happen here"
          echo "Preview URL: https://pr-${{ github.event.number }}.preview.qenergyz.com"

  deploy-staging:
    name: "üöÄ Deploy to Staging"
    runs-on: ubuntu-latest
    needs: [build-summary]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Staging deployment would happen here"
          echo "Staging URL: https://staging.qenergyz.com"