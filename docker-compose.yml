version: '3.8'

services:
  # FastAPI Backend
  qenergyz-backend:
    build: .
    container_name: qenergyz-backend
    ports:
      - "8000:8000"
    environment:
      - DB_URL=postgresql://qenergyz:qenergyz123@postgres:5432/qenergyz
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ENVIRONMENT=development
      - API_VERSION=v2
      - SECRET_KEY=dev-secret-key-change-in-production-123456789
      - ENCRYPTION_KEY=dev-encryption-key-change-in-production-987654321
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - qenergyz-network
    volumes:
      - ./backend/src:/app/src
      - qenergyz-logs:/app/logs
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: qenergyz-postgres
    environment:
      - POSTGRES_DB=qenergyz
      - POSTGRES_USER=qenergyz
      - POSTGRES_PASSWORD=qenergyz123
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./scripts/backup:/backup
    networks:
      - qenergyz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qenergyz -d qenergyz"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: qenergyz-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - qenergyz-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: qenergyz-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - qenergyz-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: qenergyz-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - qenergyz-network
    restart: unless-stopped

  # TimescaleDB for Time Series Data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: qenergyz-timescaledb
    environment:
      - POSTGRES_DB=qenergyz_timeseries
      - POSTGRES_USER=qenergyz
      - POSTGRES_PASSWORD=qenergyz123
    ports:
      - "5433:5432"
    volumes:
      - timescale-data:/var/lib/postgresql/data
      - ./scripts/init-timescale.sql:/docker-entrypoint-initdb.d/init-timescale.sql
    networks:
      - qenergyz-network
    restart: unless-stopped

  # MQTT Broker (Eclipse Mosquitto)
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: qenergyz-mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto-data:/mosquitto/data
      - mosquitto-logs:/mosquitto/log
    networks:
      - qenergyz-network
    restart: unless-stopped

  # InfluxDB for IoT Time Series
  influxdb:
    image: influxdb:2.7
    container_name: qenergyz-influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=qenergyz123
      - DOCKER_INFLUXDB_INIT_ORG=qenergyz
      - DOCKER_INFLUXDB_INIT_BUCKET=iot_data
    volumes:
      - influxdb-data:/var/lib/influxdb2
    networks:
      - qenergyz-network
    restart: unless-stopped

  # Grafana for Monitoring and Dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: qenergyz-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=qenergyz123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - qenergyz-network
    restart: unless-stopped

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: qenergyz-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - qenergyz-network
    restart: unless-stopped

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: qenergyz-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - qenergyz-network
    restart: unless-stopped

  # MinIO for Object Storage
  minio:
    image: minio/minio:RELEASE.2023-11-20T22-40-07Z
    container_name: qenergyz-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=qenergyz
      - MINIO_ROOT_PASSWORD=qenergyz123
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - qenergyz-network
    restart: unless-stopped

  # Elasticsearch for Full-text Search and Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: qenergyz-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - qenergyz-network
    restart: unless-stopped

  # Kibana for Elasticsearch Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: qenergyz-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - qenergyz-network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build: .
    container_name: qenergyz-celery-worker
    command: celery -A src.worker worker --loglevel=info
    environment:
      - DB_URL=postgresql://qenergyz:qenergyz123@postgres:5432/qenergyz
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/src:/app/src
    networks:
      - qenergyz-network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build: .
    container_name: qenergyz-celery-beat
    command: celery -A src.worker beat --loglevel=info
    environment:
      - DB_URL=postgresql://qenergyz:qenergyz123@postgres:5432/qenergyz
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/src:/app/src
    networks:
      - qenergyz-network
    restart: unless-stopped

  # React Frontend
  qenergyz-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: qenergyz-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000/ws
      - VITE_REGION=middle_east
      - VITE_DEFAULT_LANGUAGE=en
      - VITE_DEBUG_MODE=true
      - VITE_MOCK_API=false
    depends_on:
      - qenergyz-backend
    networks:
      - qenergyz-network
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: qenergyz-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - qenergyz-backend
      - qenergyz-frontend
    networks:
      - qenergyz-network
    restart: unless-stopped

# Networks
networks:
  qenergyz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres-data:
    driver: local
  timescale-data:
    driver: local
  redis-data:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  mosquitto-data:
    driver: local
  mosquitto-logs:
    driver: local
  influxdb-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  minio-data:
    driver: local
  elasticsearch-data:
    driver: local
  qenergyz-logs:
    driver: local