name: Qenergyz Backend CI/CD

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'backend/**'
      - '.github/workflows/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'requirements.txt'
  push:
    branches:
      - main
      - setup-backend-core
      - ai-esg
      - integrations-advanced
      - testing-deployment
    paths:
      - 'backend/**'
      - '.github/workflows/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write
  security-events: write

concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  CI: "true"
  ENVIRONMENT: "testing"

jobs:
  lint-and-format:
    name: "üîç Lint & Format Check"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy safety bandit

      - name: Run Black formatter check
        run: black --check --diff src tests

      - name: Run isort import sorting check
        run: isort --check-only --diff src tests

      - name: Run flake8 linting
        run: |
          flake8 src tests --max-line-length=100 --extend-ignore=E203,W503
          
      - name: Run mypy type checking
        run: mypy src --ignore-missing-imports

      - name: Run bandit security linting
        run: bandit -r src -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: backend/bandit-report.json

  security-scan:
    name: "üîí Security & Dependency Scan"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety

      - name: Run safety check for known vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          
      - name: Upload safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-security-report
          path: backend/safety-report.json

  unit-tests:
    name: "üß™ Unit Tests"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: qenergyz_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        env:
          DB_URL: postgresql://test:test@localhost:5432/qenergyz_test
          REDIS_URL: redis://localhost:6379/1
          ENVIRONMENT: testing
          DEBUG: true
          MOCK_MODE: true
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: unittests
          name: codecov-unit-tests

  integration-tests:
    name: "üîó Integration Tests"  
    runs-on: ubuntu-latest
    needs: [unit-tests]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: qenergyz_test
        ports:
          - 5432:5432

      kafka:
        image: confluentinc/cp-kafka:7.4.0
        ports:
          - 9092:9092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run integration tests
        env:
          DB_URL: postgresql://test:test@localhost:5432/qenergyz_test
          REDIS_URL: redis://localhost:6379/1
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092
          ENVIRONMENT: testing
        run: |
          pytest backend/tests/integration/ -v --maxfail=5

  codeql-analysis:
    name: "üõ°Ô∏è CodeQL Security Analysis"
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  docker-build:
    name: "üê≥ Docker Build & Security Scan"
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: qenergyz/backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'qenergyz/backend:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  performance-tests:
    name: "‚ö° Performance Tests"
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install locust

      - name: Run performance tests
        run: |
          # Mock performance tests - would run actual load tests
          echo "Performance tests would run here"

  e2e-tests:
    name: "üé≠ End-to-End Tests"
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          playwright install

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d --build
          docker-compose logs
        env:
          ENVIRONMENT: testing

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'

      - name: Run E2E tests
        run: |
          # Mock E2E tests - would run actual Playwright tests
          echo "E2E tests would run here"
          # playwright test backend/tests/e2e/

      - name: Stop services
        if: always()
        run: docker-compose down

  compliance-tests:
    name: "‚öñÔ∏è Compliance & Regulatory Tests"
    runs-on: ubuntu-latest
    needs: [unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run Sharia compliance tests
        run: |
          pytest backend/tests/unit/test_compliance.py::test_sharia_compliance -v -m compliance

      - name: Run multi-jurisdiction compliance tests
        run: |
          pytest backend/tests/unit/test_compliance.py -v -m compliance

      - name: Generate compliance report
        run: |
          # Generate compliance test report
          echo "Compliance test results would be generated here"

  build-summary:
    name: "üìä Build Summary"
    runs-on: ubuntu-latest
    needs: [
      lint-and-format, 
      security-scan, 
      unit-tests, 
      integration-tests, 
      codeql-analysis, 
      docker-build, 
      compliance-tests
    ]
    if: always()

    steps:
      - name: Generate build summary
        run: |
          echo "## üöÄ Qenergyz Backend Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Code Quality: ${{ needs.lint-and-format.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîí Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üß™ Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîó Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üê≥ Docker Build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚öñÔ∏è Compliance Tests: ${{ needs.compliance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage & Quality Metrics:" >> $GITHUB_STEP_SUMMARY
          echo "- Target Coverage: 80%+" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scans: Multiple tools (Bandit, Safety, Trivy, CodeQL)" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: Black, flake8, isort, mypy" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any failing checks above" >> $GITHUB_STEP_SUMMARY
          echo "2. Address security findings if any" >> $GITHUB_STEP_SUMMARY
          echo "3. Ensure test coverage meets requirements" >> $GITHUB_STEP_SUMMARY
          echo "4. Ready for deployment if all checks pass ‚ú®" >> $GITHUB_STEP_SUMMARY

  deploy-staging:
    name: "üöÄ Deploy to Staging"
    runs-on: ubuntu-latest
    needs: [build-summary]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deployment to staging would happen here"
          # Actual deployment commands would go here